var md5         = require("utils/md5");
var _           = require("lodash");
var spromise    = require("spromise");
var ircprovider = require("node-irc");

var connections = require("services/ircConnections");
var messages    = require("services/ircMessages");

// When both, connections and messages are loaded, we are ready
var ready = spromise.when(connections.ready, messages.ready);


function irc(app, options) {
  options     = options || {};
  this.app    = app;
  this.id     = 1;
  this.active = {};
  this.server(app);
}


// Global way of exposing a ready state for this service
irc.ready = ready.promise;


irc.prototype.server = function() {
  var _self       = this;
  var app         = this.app;


  app.post("/irc/connect", function(req, res) {
    _self.connect(req.body)
      .done(function(connection) {
        res.send({cid: connection.cid});
      });
  });


  app.post("/irc/disconnect/:cid", function(req, res) {
    _self.disconnect(req.params.cid)
      .done(function() {
        res.send();
      });
  });

  
  app.post("/irc/join/:cid", function(req, res) {
    _self.join(req.params.cid, req.body)
      .done(function(channels) {
        res.send(channels);
      });
  });
  
  
  app.post("/irc/leave/:cid", function(req, res) {
    _self.leave(req.params.cid, req.body)
      .done(function(message) {
        res.send(message);
      });
  });
  

  app.post("/irc/message/:cid", function(req, res) {
    _self.sendMessage(req.params.cid, req.body)
      .done(function(message) {
        res.send(message);
      });
  });


  app.get("/irc/message/:cid/:id", function(req, res) {
    _self.getMessage(req.params.cid, req.params.id)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });


  app.put("/irc/message/:cid", function(req, res) {
    _self.updateMessage(req.params.cid, req.body)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });


  app.delete("/irc/message/:cid", function(req, res) {
    _self.deleteMessage(req.params.cid, req.body)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });

  
  app.get("/irc/messages/:cid", function(req, res) {
    _self.getAllMessages(req.params.cid, req.query)
      .done(function(messages) {
        res.send(messages);
      });
  });

  
  app.delete("/irc/messages", function(req, res) {
    res.send(200, "I told you not to call this interface!");
  });

};


irc.prototype.connect = function(data) {
  var _self = this;
  var connConfig = _.pick(data, ["server", "port", "username"]);
  connConfig.cid = md5.hex_md5("irc://" + connConfig.server + ":" + connConfig.username);
  
  function connect(resolve) {
    // Create connection
    var ircconnection = new ircprovider(connConfig.server, connConfig.port, connConfig.username);
    _self.active[connConfig.cid] = ircconnection;
    _self.connConfig = connConfig;

    // Make sure we register a ready callback so that we know when the connection is ready
    ircconnection.on("ready", function() {
      // Insert the info of the connection into our storage
      connections.insert({cid: connConfig.cid}, function(err, connection) {
        resolve(connection);
      });
    });

    //
    // Clear out the connection object
    //
    ircconnection.on("error", function() {
      _self.active[connConfig.id] = null;
      connections.remove({cid: connConfig.id}, {}, function(){});
    });

    //
    // Handle messages comming in...  Add a read flag to keep track of new messages
    //
    ircconnection.on('message', function (from, to, message) {
      //console.log('%s => %s: %s', from, to, message);

      var _msg = {
        "cid": connConfig.cid,
        "id": _self.id++,
        "to": to,
        "from": from,
        "message": message,
        "read": false,
        "created": (new Date()).getTime(),
        "private": !to.match(/^[#&]/)
      };

      connections.insert(_msg);
    });

    // Connect to the server
    ircconnection.connect();
  }
  
  return spromise(function(resolve) {
    if ( _self.active[connConfig.cid] ) {
      resolve({cid: connConfig.cid});
    }
    else {
      connect(resolve);
    }
  });
};


irc.prototype.disconnect = function(cid) {
  var _self = this;
  return spromise(function(resolve) {
    var connection = _self.active[cid];
    
    if (connection) {
      connection.client.end();
      _self.active[cid] = null;
    }
    
    resolve();
  });
};


irc.prototype.join = function(cid, data) {
  var _self = this;
  return spromise(function(resolve, reject) {
    var connection = _self.active[cid];

    if ( connection ) {
      connection.join(data.channel);
      resolve(data);
    }
    else {
      reject();
    }
  });
};


irc.prototype.leave = function(cid, data) {
  var _self = this;
  return spromise(function(resolve, reject) {
    var connection = _self.active[cid];
    
    if ( connection ) {
      connection.part(data.channel, data.message || undefined);
      resolve(data);
    }
    else {
      reject();
    }
  });
};


irc.prototype.sendMessage = function(cid, data) {
  var _self = this;
  return spromise(function(resolve, reject) {
    var connection = _self.active[cid];
    var msg = {
      "cid": cid,
      "id": _self.id++,
      "to": data.to,
      "message": data.message,
      "created": (new Date()).getTime()
    };

    // Insert message into db
    messages.insert(msg);

    if ( connection ) {
      // Send message to irc server
      connection.say(data.to, data.message);

      // Resolve promise
      resolve(msg);
    }
    else {
      reject(msg);
    }
  });
};


irc.prototype.updateMessage = function(cid, data) {
  return spromise(function(resolve, reject) {
    var msg = {
      "updated": (new Date()).getTime(),
      "message": data.message
    };
    
    var query = {
      id: data.id,
      cid: cid
    };
    
    messages.update(query, msg, {}, function(err) {
      if ( err ) {
        reject(err);
      }
      else {
        resolve(msg);
      }
    });
  });
};


irc.prototype.deleteMessage = function(cid, data) {
  return spromise(function(resolve, reject) {
    var query = {
      id: data.id,
      cid: cid
    };
    
    messages.remove(query, {}, function(err) {
      if ( err ) {
        reject(err);
      }
      else {
        resolve();
      }
    });
  });
};


irc.prototype.getMessage = function(cid, id) {
  return spromise(function(resolve) {
    var query = {
      cid: cid,
      id: id
    };
    
    messages.find(query, function(messages) {
      resolve(messages);
    });
  });
};


irc.prototype.getAllMessages = function(cid, options) {
  return spromise(function(resolve) {
    var query = {
      cid: cid
    };

    if (options.hasOwnProperty("to")) {
      query.to = options.to;
    }
    
    if (options.hasOwnProperty("read")) {
      query.read = options.read;
    }

    messages.find(query, function(err, messages) {
      resolve(messages);
    });
  });
};


irc.prototype.deleteAllMessages = function() {
};


module.exports = irc;
