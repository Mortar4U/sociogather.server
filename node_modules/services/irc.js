var sgProvider  = require("services/sgProvider");
var idManager   = require("persistence/ircIdManager");
var connections = require("persistence/ircConnections");
var messages    = require("persistence/ircMessages");
var extender    = require("utils/extender");
var md5         = require("utils/md5");
var _           = require("lodash");
var spromise    = require("spromise");
var ircProvider = require("node-irc");


// When both, connections and messages are loaded, we are ready
var ready = spromise.when(idManager.ready, connections.ready, messages.ready);


function irc() {
  this.initialize();
}


function initialize(options) {
  options     = options || {};
  this.active = {};
  this.ready  = ready;
}


function connect(data) {
  var _self = this;
  var connConfig = _.pick(data, ["server", "port", "username"]);
  connConfig.cid = md5.hex_md5(connConfig.server + ":" + connConfig.username);


  function onMessage(data, private) {
    var _msg = {
      "family": "irc",
      "cid": connConfig.cid,
      "id": idManager.generateId(),
      "to": data.receiver,
      "from": data.sender,
      "message": data.message,
      "read": false,
      "created": (new Date()).getTime(),
      "private": private
    };

    messages.insert(_msg);
  }


  function doConnect(resolve) {
    // Create connection
    var ircConnection = new ircProvider(connConfig.server, connConfig.port, connConfig.username);
    ircConnection.verbosity = 0;
    //ircConnection.debug = true;
    _self.active[connConfig.cid] = ircConnection;
    _self.connConfig = connConfig;

    // Make sure we register a ready callback so that we know when the connection is ready
    ircConnection.on("ready", function() {
      // Insert the info of the connection into our storage
      connections.update({cid: connConfig.cid}, { $set: {cid: connConfig.cid} }, {upsert: true}, function() {
        resolve(connConfig);
      });
    });

    ircConnection.on("error", function() {
      delete _self.active[connConfig.id];
      connections.remove({cid: connConfig.id}, {}, function(){});
    });

    ircConnection.on('PRIVMSG', function (data) {
      onMessage(data, true);
    });

    ircConnection.on('CHANMSG', function (data) {
      onMessage(data, false);
    });

    // Connect to the server
    ircConnection.connect();
  }


  return spromise(function(resolve) {
    if ( _self.active[connConfig.cid] ) {
      resolve({cid: connConfig.cid});
    }
    else {
      doConnect(resolve);
    }
  });
}


function disconnect(cid) {
  var _self = this;
  return spromise(function(resolve) {
    var connection = _self.active[cid];

    if (connection) {
      connection.client.end();
      delete _self.active[cid];
    }

    resolve();
  });
}


function join(cid, data) {
  var _self = this;
  return spromise(function(resolve, reject) {
    var connection = _self.active[cid];

    if ( connection ) {
      connection.join(data.channel);
      resolve(data);
    }
    else {
      reject();
    }
  });
}


function leave(cid, data) {
  var _self = this;
  return spromise(function(resolve, reject) {
    var connection = _self.active[cid];

    if ( connection ) {
      connection.part(data.channel, data.message || undefined);
      resolve(data);
    }
    else {
      reject();
    }
  });
}


function sendMessage(cid, data) {
  var _self = this;
  return spromise(function(resolve, reject) {
    var connection = _self.active[cid];
    var msg = {
      "cid": cid,
      "id": idManager.generateId(),
      "to": data.to,
      "message": data.message,
      "created": (new Date()).getTime()
    };

    // Insert message into db
    messages.insert(msg);

    if ( connection ) {
      // Send message to irc server
      connection.say(data.to, data.message);

      // Resolve promise
      resolve(msg);
    }
    else {
      reject(msg);
    }
  });
}


function updateMessage(cid, data) {
  return spromise(function(resolve, reject) {
    var msg = {
      "updated": (new Date()).getTime(),
      "message": data.message
    };

    var query = {
      id: data.id,
      cid: cid
    };

    messages.update(query, { $set: msg }, {}, function(err) {
      if ( err ) {
        reject(err);
      }
      else {
        resolve(msg);
      }
    });
  });
}


function deleteMessage(cid, data) {
  return spromise(function(resolve, reject) {
    var query = {
      id: data.id,
      cid: cid
    };

    messages.remove(query, {}, function(err) {
      if ( err ) {
        reject(err);
      }
      else {
        resolve();
      }
    });
  });
}


function getMessage(cid, id) {
  return spromise(function(resolve) {
    var query = {
      cid: cid,
      id: id
    };

    messages.find(query, function(err, messages) {
      resolve(messages);
    });
  });
}


function getAllMessages(cid, options) {
  return spromise(function(resolve) {
    var query = {
      cid: cid
    };

    if (options.hasOwnProperty("to")) {
      query.to = options.to;
    }

    if (options.hasOwnProperty("unread")) {
      query.unread = options.unread;
    }

    messages.find(query, function(err, messages) {
      resolve(messages);

      if ( query.unread === true ) {
        messages.update(query, { $set: {unread: false} }, {}, function(){});
      }
    });
  });
}


module.exports = extender.extend(irc, sgProvider, {
  initialize: initialize,
  connect: connect,
  disconnect: disconnect,
  join: join,
  leave: leave,
  sendMessage: sendMessage,
  updateMessage: updateMessage,
  deleteMessage: deleteMessage,
  getMessage: getMessage,
  getAllMessages: getAllMessages
});

