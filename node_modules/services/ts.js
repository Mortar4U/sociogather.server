var md5 = require("utils/md5");
var mixin = require("utils/mixin");
var spromise = require("spromise");

var connections = require("services/tsConnections");
var messages    = require("services/tsMessages");

// Let's make sure we set the proper ready state when the db is loaded
var ready = spromise.when(connections.ready, messages.ready);


function TooSimple(app, options) {
  options = options || {};
  var _self = this;
  this.id = 0;
  this.app = app;

  ready.done(function() {
    _self.server(app);
  });
}


// Global way of exposing a ready state for this service
TooSimple.ready = ready.promise;


TooSimple.prototype.server = function() {
  var _self = this;
  var app = this.app;

  app.post("/ts/connect", function(req, res) {
    _self.connect(req.data)
      .done(function(connection) {
        res.send({id: connection.id});
      });
  });

  app.get("/ts/messages", function(req, res) {
    _self.getAllMessages()
      .done(function(messages) {
        res.send(messages);
      });
  });


  app.delete("/ts/messages", function(req, res) {
    res.send(200, "I told you not to call this interface!");
  });


  app.get("/ts/message/:id", function(req, res) {
    _self.getMessage(req.params.id)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });


  app.post("/ts/message", function(req, res) {
    _self.createMessage(req.body)
      .done(function(message) {
        res.send(message);
      });
  });


  app.put("/ts/message", function(req, res) {
    _self.updateMessage(req.body)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });


  app.delete("/ts/message:id", function(req, res) {
    _self.deleteMessage(req.params.id)
      .done(function(message) {
        res.send(message);
      })
      .fail(function() {
        res.send(404, "Not found");
      });
  });

};


TooSimple.prototype.connect = function(data) {
  data = data || {};
  var key = md5.hex_md5( data.username || "anonymous" );

  return spromise(function(resolve, reject) {
    connections.find({id: key}, function (err, connection) {
      if (err) {
        return reject(err);
      }
      else if (connection.length) {
        return resolve(connection);
      }

      connection.id = key;
      connections.insert(connection, function(err, connection) {
        resolve(connection);
      });      
    });
  });
};


TooSimple.prototype.getAllMessages = function() {
  return spromise(function(resolve, reject) {
    messages.find({}, function (err, messages) {
      //console.log(err);
      if (err) {
        reject(err);
      }
      else {
        resolve(messages);
      }
    });
  });
};


TooSimple.prototype.deleteAllMessages = function() {
  return spromise(function(resolve, reject) {
    reject();
  });
};


TooSimple.prototype.getMessage = function(id) {
  return spromise(function(resolve, reject) {
    messages.findOne({"id": id}, function (err, message) {
      //console.log(err);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(message);
      }
    });
  });
};


TooSimple.prototype.createMessage = function(data) {
  var id = this.id++;
  return spromise(function(resolve, reject) {
    var message = mixin({
      "id": id,
      "created": (new Date()).getTime()
    }, data);

    messages.insert(message, function(err, nmessage) {
      //console.log(err);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(nmessage);
      }
    });
  });
};


TooSimple.prototype.updateMessage = function(data) {
  var id = data.id;
  return spromise(function(resolve, reject) {
    var message = mixin({
      "updated": (new Date()).getTime()
    }, data);

    messages.update({"id": id}, message, {}, function(err /*, numReplaced*/) {
      //console.log(err, numReplaced);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(message);
      }
    });
  });
};


TooSimple.prototype.deleteMessage = function(id) {
  return spromise(function(resolve, reject) {
    messages.remove({"id": id}, {}, function(err /*, numRemoved*/) {
      //console.log(err, numRemoved);
      if ( err ) {
        reject( err );
      }
      else {
        resolve();
      }
    });
  });
};


module.exports = TooSimple;
