var sgProvider  = require("services/sgProvider");
var connections = require("persistence/tsConnections");
var messages    = require("persistence/tsMessages");
var extender    = require("utils/extender");
var md5         = require("utils/md5");
var mixin       = require("utils/mixin");
var spromise    = require("spromise");


// Let's make sure we set the proper ready state when the db is loaded
var ready = spromise.when(connections.ready, messages.ready);


function ts() {
  this.initialize();
}


function initialize(options) {
  options    = options || {};
  this.id    = 0;
  this.ready = ready;
}


function connect(data) {
  data = data || {};
  var key = md5.hex_md5( data.username || "anonymous" );

  return spromise(function(resolve, reject) {
    connections.find({id: key}, function (err, connection) {
      if (err) {
        return reject(err);
      }
      else if (connection.length) {
        return resolve(connection);
      }

      connection.id = key;
      connections.insert(connection, function(err, connection) {
        resolve(connection);
      });
    });
  });
}


function getAllMessages() {
  return spromise(function(resolve, reject) {
    messages.find({}, function (err, messages) {
      //console.log(err);
      if (err) {
        reject(err);
      }
      else {
        resolve(messages);
      }
    });
  });
}


function deleteAllMessages() {
  return spromise(function(resolve, reject) {
    reject();
  });
}


function getMessage(id) {
  return spromise(function(resolve, reject) {
    messages.findOne({"id": id}, function (err, message) {
      //console.log(err);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(message);
      }
    });
  });
}


function createMessage(data) {
  var id = this.id++;
  return spromise(function(resolve, reject) {
    var message = mixin({
      "id": id,
      "created": (new Date()).getTime()
    }, data);

    messages.insert(message, function(err, nmessage) {
      //console.log(err);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(nmessage);
      }
    });
  });
}


function updateMessage(data) {
  var id = data.id;
  return spromise(function(resolve, reject) {
    var message = mixin({
      "updated": (new Date()).getTime()
    }, data);

    messages.update({"id": id}, message, {}, function(err /*, numReplaced*/) {
      //console.log(err, numReplaced);
      if ( err ) {
        reject(err);
      }
      else {
        resolve(message);
      }
    });
  });
}


function deleteMessage(id) {
  return spromise(function(resolve, reject) {
    messages.remove({"id": id}, {}, function(err /*, numRemoved*/) {
      //console.log(err, numRemoved);
      if ( err ) {
        reject( err );
      }
      else {
        resolve();
      }
    });
  });
}


module.exports = extender.extend(ts, sgProvider, {
  initialize: initialize,
  connect: connect,
  getAllMessages: getAllMessages,
  deleteAllMessages: deleteAllMessages,
  getMessage: getMessage,
  createMessage: createMessage,
  updateMessage: updateMessage,
  deleteMessage: deleteMessage
});
